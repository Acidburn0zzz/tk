# This file is a Tcl script to test entry widgets in Tk.  It is
# organized in the standard fashion for Tcl tests.
#
# Copyright (c) 1994 The Regents of the University of California.
# Copyright (c) 1994-1997 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.

package require tcltest 2.2
eval tcltest::configure $argv
tcltest::loadTestedCommands
namespace import -force tcltest::test

deleteWindows

# A simple superclass to handle calling Initialise and cleaning up
oo::class create cfgsupport {
    variable window
    constructor {w args} {
	set window [frame $w]
	my Initialise $w {*}$args
    }
    destructor {
	destroy $window
    }

    self method clean {} {
	foreach c [info class subclasses [self]] {
	    catch {$c destroy}
	}
    }
}

test oocfg-1.1 {tk::configurable: basic test} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo
    }
    set gorp [Gorp new .gorp -foo bar]
    list [$gorp configure] [$gorp configure -foo] [$gorp configure -foo grill] \
	[$gorp cget -foo]
} -cleanup {
    cfgsupport clean
} -result {{{-foo foo Foo {} bar}} {-foo foo Foo {} bar} {} grill}
test oocfg-1.2 {tk::configurable: basic test with default} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -default 135
    }
    set gorp [Gorp new .gorp -foo bar]
    list [$gorp configure] [$gorp configure -foo] [$gorp configure -foo grill] \
	[$gorp cget -foo]
} -cleanup {
    cfgsupport clean
} -result {{{-foo foo Foo 135 bar}} {-foo foo Foo 135 bar} {} grill}
test oocfg-1.3 {tk::configurable: basic test with typing} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -type integer
    }
    set gorp [Gorp new .gorp -foo 789]
    list [$gorp configure] [$gorp configure -foo] [$gorp configure -foo 153] \
	[$gorp cget -foo] [catch {$gorp configure -foo bar} msg] $msg
} -cleanup {
    cfgsupport clean
} -result {{{-foo foo Foo 0 789}} {-foo foo Foo 0 789} {} 153 1 {invalid integer value "bar"}}
test oocfg-1.4 {tk::configurable: basic test with alias} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -type integer -default 135
	option bar -alias foo
    }
    set gorp [Gorp new .gorp -bar 789]
    list [$gorp configure] [$gorp configure -bar] [$gorp configure -bar 153] \
	[$gorp cget -foo] [$gorp cget -bar] \
	[catch {$gorp configure -bar grill} msg] $msg
} -cleanup {
    cfgsupport clean
} -result {{{-bar -foo} {-foo foo Foo 135 789}} {-bar -foo} {} 153 153 1 {invalid integer value "grill"}}
test oocfg-1.5 {tk::configurable: basic test with option DB} -setup {
    option clear
} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -default bar
    }
    option add *gorp.foo ok
    set gorp [Gorp new .gorp]
    $gorp configure
} -cleanup {
    option clear
    cfgsupport clean
} -result {{-foo foo Foo bar ok}}
test oocfg-1.6 {tk::configurable: basic test with option DB} -setup {
    option clear
} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -default bar
    }
    option add *gorp.Foo ok
    set gorp [Gorp new .gorp]
    $gorp configure
} -cleanup {
    option clear
    cfgsupport clean
} -result {{-foo foo Foo bar ok}}
test oocfg-1.7 {tk::configurable: basic test with option DB} -setup {
    option clear
} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -default bar
    }
    option add *gorp.foo xyz
    option add *gorp.Foo zyx
    set gorp [Gorp new .gorp]
    $gorp configure
} -cleanup {
    option clear
    cfgsupport clean
} -result {{-foo foo Foo bar zyx}}
test oocfg-1.8 {tk::configurable: basic test with option DB} -setup {
    option clear
} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -name foobar -class FooBar -default ok
    }
    option add *gorp.foo bad
    set gorp [Gorp new .gorp]
    $gorp configure
} -cleanup {
    option clear
    cfgsupport clean
} -result {{-foo foobar FooBar ok ok}}
test oocfg-1.9 {tk::configurable: basic test with option DB} -setup {
    option clear
} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -name foobar -class FooBar -default ok
    }
    option add *gorp.foo bad
    option add *FooBar great
    set gorp [Gorp new .gorp]
    $gorp configure
} -cleanup {
    option clear
    cfgsupport clean
} -result {{-foo foobar FooBar ok great}}
test oocfg-1.10 {tk::configurable: basic test with option DB} -setup {
    option clear
} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	# Values from option DB are subject to validation, but failure just
	# triggers using the default, not an error.
	option foo -name foo -default 123 -type integer
    }
    option add *gorp.foo bad
    set gorp [Gorp new .gorp]
    $gorp configure
} -cleanup {
    option clear
    cfgsupport clean
} -result {{-foo foo Foo 123 123}}
test oocfg-1.11 {tk::configurable: basic test with inheritance} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo
    }
    tk::configurable create Gorp2 {
	superclass Gorp
	option bar
    }
    set gorp [Gorp2 new .gorp -foo 1 -bar 2]
    $gorp configure
} -cleanup {
    cfgsupport clean
} -result {{-bar bar Bar {} 2} {-foo foo Foo {} 1}}
test oocfg-1.12 {tk::configurable: basic test with inheritance} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -default abc
    }
    tk::configurable create Gorp2 {
	superclass Gorp
	option foo -default xyz
    }
    set gorp [Gorp2 new .gorp]
    $gorp configure
} -cleanup {
    cfgsupport clean
} -result {{-foo foo Foo xyz xyz}}

test oocfg-2.1 {tk::configurable: option cfg abbreviation} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -def ok
	option bar -al foo
    }
    [Gorp new .gorp] configure
} -cleanup {
    cfgsupport clean
} -result {{-bar -foo} {-foo foo Foo ok ok}}
test oocfg-2.2 {tk::configurable: option cfg abbreviation} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -def ok
	option bar -al -foo
    }
    [Gorp new .gorp] configure
} -cleanup {
    cfgsupport clean
} -result {{-bar -foo} {-foo foo Foo ok ok}}
test oocfg-2.3 {tk::configurable: option cfg abbreviation} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -def ok -n john -c Smith
    }
    [Gorp new .gorp] configure
} -cleanup {
    cfgsupport clean
} -result {{-foo john Smith ok ok}}
test oocfg-2.4 {tk::configurable: option cfg abbreviation and case} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option FOO -ty str
    }
    [Gorp new .gorp] configure
} -cleanup {
    cfgsupport clean
} -result {{-FOO foo Foo {} {}}}
test oocfg-2.5 {tk::configurable: option cfg abbreviation} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -ty just -de r
    }
    [Gorp new .gorp] configure
} -cleanup {
    cfgsupport clean
} -result {{-foo foo Foo right right}}

test oocfg-3.1 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -gorp
    }
} -result {wrong # args: should be "option name ?-option value ...?"}
test oocfg-3.2 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -gorp blat
    }
} -result {bad option "-gorp": must be -alias, -class, -default, -initonly, -name, or -type}
test oocfg-3.3 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -type gorp
    }
} -match glob -result {unknown or ambiguous subcommand "gorp": must be *}
test oocfg-3.4 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -type integer -default abc
    }
} -result {invalid integer value "abc"}
test oocfg-3.5 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -default abc -type integer
    }
} -result {invalid integer value "abc"}
test oocfg-3.6 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option @bad
    }
} -result {bad option name "@bad": must be alphanumeric starting with a letter}
test oocfg-3.7 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -name Abc
    }
} -result {-name must be alphanumeric with a leading lower-case letter}
test oocfg-3.8 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -class abc
    }
} -result {-class must be alphanumeric with a leading capital letter}
test oocfg-3.9 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -alias foo
    }
} -result {no such option "-foo"}
test oocfg-3.10 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo
	option bar -type string -alias foo
    }
} -result {-alias may only ever be used on its own}
test oocfg-3.11 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -init gorp
    }
} -result {invalid boolean value "gorp"}
test oocfg-3.12 {tk::configurable: option errors} -returnCodes error -body {
    tk::configurable create Gorp {
	option foo -init 1
	option bar -alias foo
    }
} -result {may not alias init-only option "-foo"}
test oocfg-3.13 {tk::configurable: option errors (cross class)} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foo -init 1
    }
    tk::configurable create Gorp2 {
	superclass Gorp
	option bar -alias foo
    }
} -returnCodes error -cleanup {
    cfgsupport clean
} -result {may not alias init-only option "-foo"}

test oocfg-4.1 {tk::configurable: configure behaviour} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foe -default 1
	option fie -default 2
	option fum -default 3
	option fee -default 4
    }
    set gorp [Gorp new .gorp]
    $gorp configure
} -cleanup {
    cfgsupport clean
} -result {{-fee fee Fee 4 4} {-fie fie Fie 2 2} {-foe foe Foe 1 1} {-fum fum Fum 3 3}}
test oocfg-4.2 {tk::configurable: configure behaviour} -body {
    tk::configurable create Gorp {
	superclass cfgsupport
	option foe
	option fie
	option fum
	option fee
    }
    set gorp [Gorp new .gorp]
    $gorp configure -f
} -returnCodes error -cleanup {
    cfgsupport clean
} -result {ambiguous option "-f": must be -fee, -fie, -foe, or -fum}
test oocfg-4.3 {tk::configurable: configure behaviour (inheritance assembly)} -body {
    tk::configurable create GorpFoe {
	superclass cfgsupport
	option foe
    }
    tk::configurable create GorpFie {
	superclass cfgsupport
	option fie
    }
    tk::configurable create GorpFum {
	superclass cfgsupport
	option fum
    }
    tk::configurable create GorpFee {
	superclass cfgsupport
	option fee
    }
    tk::configurable create Gorp {
	superclass GorpFum GorpFee
	mixin GorpFoe
    }
    set gorp [Gorp new .gorp]
    oo::objdefine $gorp mixin GorpFie
    $gorp configure -f
} -returnCodes error -cleanup {
    cfgsupport clean
} -result {ambiguous option "-f": must be -fee, -fie, -foe, or -fum}

# cleanup
deleteWindows
cleanupTests
return

# Local Variables:
# mode: tcl
# End:
